// Generated by gencpp from file second_coursework/PatrolResult.msg
// DO NOT EDIT!


#ifndef SECOND_COURSEWORK_MESSAGE_PATROLRESULT_H
#define SECOND_COURSEWORK_MESSAGE_PATROLRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace second_coursework
{
template <class ContainerAllocator>
struct PatrolResult_
{
  typedef PatrolResult_<ContainerAllocator> Type;

  PatrolResult_()
    : people_positions()
    , cat_positions()
    , dog_positions()  {
    }
  PatrolResult_(const ContainerAllocator& _alloc)
    : people_positions(_alloc)
    , cat_positions(_alloc)
    , dog_positions(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _people_positions_type;
  _people_positions_type people_positions;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _cat_positions_type;
  _cat_positions_type cat_positions;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _dog_positions_type;
  _dog_positions_type dog_positions;





  typedef boost::shared_ptr< ::second_coursework::PatrolResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::second_coursework::PatrolResult_<ContainerAllocator> const> ConstPtr;

}; // struct PatrolResult_

typedef ::second_coursework::PatrolResult_<std::allocator<void> > PatrolResult;

typedef boost::shared_ptr< ::second_coursework::PatrolResult > PatrolResultPtr;
typedef boost::shared_ptr< ::second_coursework::PatrolResult const> PatrolResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::second_coursework::PatrolResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::second_coursework::PatrolResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::second_coursework::PatrolResult_<ContainerAllocator1> & lhs, const ::second_coursework::PatrolResult_<ContainerAllocator2> & rhs)
{
  return lhs.people_positions == rhs.people_positions &&
    lhs.cat_positions == rhs.cat_positions &&
    lhs.dog_positions == rhs.dog_positions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::second_coursework::PatrolResult_<ContainerAllocator1> & lhs, const ::second_coursework::PatrolResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace second_coursework

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::second_coursework::PatrolResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::second_coursework::PatrolResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::second_coursework::PatrolResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::second_coursework::PatrolResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::second_coursework::PatrolResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::second_coursework::PatrolResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::second_coursework::PatrolResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "19944e0b20a2274c6da955fe1e2bfa5a";
  }

  static const char* value(const ::second_coursework::PatrolResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x19944e0b20a2274cULL;
  static const uint64_t static_value2 = 0x6da955fe1e2bfa5aULL;
};

template<class ContainerAllocator>
struct DataType< ::second_coursework::PatrolResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "second_coursework/PatrolResult";
  }

  static const char* value(const ::second_coursework::PatrolResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::second_coursework::PatrolResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result\n"
"geometry_msgs/Pose[] people_positions\n"
"geometry_msgs/Pose[] cat_positions\n"
"geometry_msgs/Pose[] dog_positions\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::second_coursework::PatrolResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::second_coursework::PatrolResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.people_positions);
      stream.next(m.cat_positions);
      stream.next(m.dog_positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PatrolResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::second_coursework::PatrolResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::second_coursework::PatrolResult_<ContainerAllocator>& v)
  {
    s << indent << "people_positions[]" << std::endl;
    for (size_t i = 0; i < v.people_positions.size(); ++i)
    {
      s << indent << "  people_positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.people_positions[i]);
    }
    s << indent << "cat_positions[]" << std::endl;
    for (size_t i = 0; i < v.cat_positions.size(); ++i)
    {
      s << indent << "  cat_positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.cat_positions[i]);
    }
    s << indent << "dog_positions[]" << std::endl;
    for (size_t i = 0; i < v.dog_positions.size(); ++i)
    {
      s << indent << "  dog_positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.dog_positions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SECOND_COURSEWORK_MESSAGE_PATROLRESULT_H
