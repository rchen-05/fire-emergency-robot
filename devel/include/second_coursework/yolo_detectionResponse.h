// Generated by gencpp from file second_coursework/yolo_detectionResponse.msg
// DO NOT EDIT!


#ifndef SECOND_COURSEWORK_MESSAGE_YOLO_DETECTIONRESPONSE_H
#define SECOND_COURSEWORK_MESSAGE_YOLO_DETECTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace second_coursework
{
template <class ContainerAllocator>
struct yolo_detectionResponse_
{
  typedef yolo_detectionResponse_<ContainerAllocator> Type;

  yolo_detectionResponse_()
    : labels()
    , confidences()
    , boxes()  {
    }
  yolo_detectionResponse_(const ContainerAllocator& _alloc)
    : labels(_alloc)
    , confidences(_alloc)
    , boxes(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _labels_type;
  _labels_type labels;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _confidences_type;
  _confidences_type confidences;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _boxes_type;
  _boxes_type boxes;





  typedef boost::shared_ptr< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct yolo_detectionResponse_

typedef ::second_coursework::yolo_detectionResponse_<std::allocator<void> > yolo_detectionResponse;

typedef boost::shared_ptr< ::second_coursework::yolo_detectionResponse > yolo_detectionResponsePtr;
typedef boost::shared_ptr< ::second_coursework::yolo_detectionResponse const> yolo_detectionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::second_coursework::yolo_detectionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::second_coursework::yolo_detectionResponse_<ContainerAllocator1> & lhs, const ::second_coursework::yolo_detectionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.labels == rhs.labels &&
    lhs.confidences == rhs.confidences &&
    lhs.boxes == rhs.boxes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::second_coursework::yolo_detectionResponse_<ContainerAllocator1> & lhs, const ::second_coursework::yolo_detectionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace second_coursework

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30abc870f861b6689711ba995ff0a06e";
  }

  static const char* value(const ::second_coursework::yolo_detectionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30abc870f861b668ULL;
  static const uint64_t static_value2 = 0x9711ba995ff0a06eULL;
};

template<class ContainerAllocator>
struct DataType< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "second_coursework/yolo_detectionResponse";
  }

  static const char* value(const ::second_coursework::yolo_detectionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] labels\n"
"float32[] confidences\n"
"geometry_msgs/Point[] boxes\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::second_coursework::yolo_detectionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.labels);
      stream.next(m.confidences);
      stream.next(m.boxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct yolo_detectionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::second_coursework::yolo_detectionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::second_coursework::yolo_detectionResponse_<ContainerAllocator>& v)
  {
    s << indent << "labels[]" << std::endl;
    for (size_t i = 0; i < v.labels.size(); ++i)
    {
      s << indent << "  labels[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.labels[i]);
    }
    s << indent << "confidences[]" << std::endl;
    for (size_t i = 0; i < v.confidences.size(); ++i)
    {
      s << indent << "  confidences[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.confidences[i]);
    }
    s << indent << "boxes[]" << std::endl;
    for (size_t i = 0; i < v.boxes.size(); ++i)
    {
      s << indent << "  boxes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.boxes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SECOND_COURSEWORK_MESSAGE_YOLO_DETECTIONRESPONSE_H
