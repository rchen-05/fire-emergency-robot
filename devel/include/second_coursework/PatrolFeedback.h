// Generated by gencpp from file second_coursework/PatrolFeedback.msg
// DO NOT EDIT!


#ifndef SECOND_COURSEWORK_MESSAGE_PATROLFEEDBACK_H
#define SECOND_COURSEWORK_MESSAGE_PATROLFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace second_coursework
{
template <class ContainerAllocator>
struct PatrolFeedback_
{
  typedef PatrolFeedback_<ContainerAllocator> Type;

  PatrolFeedback_()
    : new_people(0)
    , new_cats(0)
    , new_dogs(0)
    , last_detection_pose()  {
    }
  PatrolFeedback_(const ContainerAllocator& _alloc)
    : new_people(0)
    , new_cats(0)
    , new_dogs(0)
    , last_detection_pose(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _new_people_type;
  _new_people_type new_people;

   typedef int32_t _new_cats_type;
  _new_cats_type new_cats;

   typedef int32_t _new_dogs_type;
  _new_dogs_type new_dogs;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _last_detection_pose_type;
  _last_detection_pose_type last_detection_pose;





  typedef boost::shared_ptr< ::second_coursework::PatrolFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::second_coursework::PatrolFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct PatrolFeedback_

typedef ::second_coursework::PatrolFeedback_<std::allocator<void> > PatrolFeedback;

typedef boost::shared_ptr< ::second_coursework::PatrolFeedback > PatrolFeedbackPtr;
typedef boost::shared_ptr< ::second_coursework::PatrolFeedback const> PatrolFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::second_coursework::PatrolFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::second_coursework::PatrolFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::second_coursework::PatrolFeedback_<ContainerAllocator1> & lhs, const ::second_coursework::PatrolFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.new_people == rhs.new_people &&
    lhs.new_cats == rhs.new_cats &&
    lhs.new_dogs == rhs.new_dogs &&
    lhs.last_detection_pose == rhs.last_detection_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::second_coursework::PatrolFeedback_<ContainerAllocator1> & lhs, const ::second_coursework::PatrolFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace second_coursework

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::second_coursework::PatrolFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::second_coursework::PatrolFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::second_coursework::PatrolFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::second_coursework::PatrolFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::second_coursework::PatrolFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::second_coursework::PatrolFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::second_coursework::PatrolFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "195414f01541c8b1d9f838f493884f8f";
  }

  static const char* value(const ::second_coursework::PatrolFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x195414f01541c8b1ULL;
  static const uint64_t static_value2 = 0xd9f838f493884f8fULL;
};

template<class ContainerAllocator>
struct DataType< ::second_coursework::PatrolFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "second_coursework/PatrolFeedback";
  }

  static const char* value(const ::second_coursework::PatrolFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::second_coursework::PatrolFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback\n"
"int32 new_people\n"
"int32 new_cats\n"
"int32 new_dogs\n"
"geometry_msgs/Pose last_detection_pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::second_coursework::PatrolFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::second_coursework::PatrolFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.new_people);
      stream.next(m.new_cats);
      stream.next(m.new_dogs);
      stream.next(m.last_detection_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PatrolFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::second_coursework::PatrolFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::second_coursework::PatrolFeedback_<ContainerAllocator>& v)
  {
    s << indent << "new_people: ";
    Printer<int32_t>::stream(s, indent + "  ", v.new_people);
    s << indent << "new_cats: ";
    Printer<int32_t>::stream(s, indent + "  ", v.new_cats);
    s << indent << "new_dogs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.new_dogs);
    s << indent << "last_detection_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.last_detection_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SECOND_COURSEWORK_MESSAGE_PATROLFEEDBACK_H
